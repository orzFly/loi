import * as t from '../iots';
import { isPlainObject } from '../utilties/lodash';
import { LoiFactoryTypeBase, start } from './Base';

/*
  [...Array(16)].map((_, i) =>
    `export function set<${[...Array(i + 1)].map((_, i) => `T${i + 1} extends string | number | boolean`).join(", ")}>(${[...Array(i + 1)].map((_, i) => `t${i + 1}: T${i + 1}`).join(", ")}): LoiFactoryTypeBase<t.Type<${[...Array(i + 1)].map((_, i) => `T${i + 1}`).join(" | ")}, ${[...Array(i + 1)].map((_, i) => `T${i + 1}`).join(" | ")}>>`
  ).join("\n")
*/
export function set<T1 extends string | number | boolean>(t1: T1): LoiFactoryTypeBase<t.Type<T1, T1>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean>(t1: T1, t2: T2): LoiFactoryTypeBase<t.Type<T1 | T2, T1 | T2>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean>(t1: T1, t2: T2, t3: T3): LoiFactoryTypeBase<t.Type<T1 | T2 | T3, T1 | T2 | T3>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4, T1 | T2 | T3 | T4>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5, T1 | T2 | T3 | T4 | T5>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6, T1 | T2 | T3 | T4 | T5 | T6>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7, T1 | T2 | T3 | T4 | T5 | T6 | T7>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean, T10 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean, T10 extends string | number | boolean, T11 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean, T10 extends string | number | boolean, T11 extends string | number | boolean, T12 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean, T10 extends string | number | boolean, T11 extends string | number | boolean, T12 extends string | number | boolean, T13 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean, T10 extends string | number | boolean, T11 extends string | number | boolean, T12 extends string | number | boolean, T13 extends string | number | boolean, T14 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean, T10 extends string | number | boolean, T11 extends string | number | boolean, T12 extends string | number | boolean, T13 extends string | number | boolean, T14 extends string | number | boolean, T15 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14 | T15, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14 | T15>>
export function set<T1 extends string | number | boolean, T2 extends string | number | boolean, T3 extends string | number | boolean, T4 extends string | number | boolean, T5 extends string | number | boolean, T6 extends string | number | boolean, T7 extends string | number | boolean, T8 extends string | number | boolean, T9 extends string | number | boolean, T10 extends string | number | boolean, T11 extends string | number | boolean, T12 extends string | number | boolean, T13 extends string | number | boolean, T14 extends string | number | boolean, T15 extends string | number | boolean, T16 extends string | number | boolean>(t1: T1, t2: T2, t3: T3, t4: T4, t5: T5, t6: T6, t7: T7, t8: T8, t9: T9, t10: T10, t11: T11, t12: T12, t13: T13, t14: T14, t15: T15, t16: T16): LoiFactoryTypeBase<t.Type<T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14 | T15 | T16, T1 | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9 | T10 | T11 | T12 | T13 | T14 | T15 | T16>>

export function set<T extends object>(t: T): LoiFactoryTypeBase<t.Type<keyof T, keyof T>>

export function set(...values: any[]): t.Any {
  if (values.length == 1 && isPlainObject(values[0])) {
    return start(t.union(Object.keys(values[0]).map((i) => t.literal(i))))
  }

  return start(t.union(values.map((i) => t.literal(i))))
}